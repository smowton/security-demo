{
  "namespace": "com.diffblue.security",
  "rules":
    [
      {
        "comment": "Streams returned by getInputStream on ServletRequest are tainted",
        "class": "training07.HttpServletRequest",
        "method": "getInputStream:()Ltraining07/InputStream;",
        "result": {
          "location": "returnValue",
          "taint": "Tainted stream"
        }
      },
      {
        "comment": "Read from tainted stream gives tainted string",
        "class": "training07.InputStream",
        "method": "read:([BII)I",
        "input": {
          "location": "this",
          "taint": "Tainted stream"
        },
        "result": {
          "location": "arg1",
          "namespace": "com.diffblue.security.specialized",
          "taint": "Tainted byte array"
        }
      },
      {
        "comment": "Construction from an array of tainted bytes gives a tainted string",
        "class": "training07.String",
        "method": "<init>:([BII)V",
        "input": {
          "location": "arg1",
          "namespace": "com.diffblue.security.specialized",
          "taint": "Tainted byte array"
        },
        "result": {
          "location": "this",
          "taint": "Tainted string"
        }
      },
      {
        "comment": "Bytes obtained from a tainted string are tainted.",
        "class": "training07.String",
        "method": "getBytes:()[B",
        "input": {
          "location": "this",
          "taint": "Tainted string"
        },
        "result": {
          "location": "returnValue",
          "namespace": "com.diffblue.security.specialized",
          "taint": "Tainted byte array"
        }
      },
      {
        "comment": "Streams returned by getOutputStream on ServletResponse are vulnerable",
        "class": "training07.HttpServletResponse",
        "method": "getOutputStream:()Ltraining07/OutputStream;",
        "result": {
          "location": "returnValue",
          "vulnerability": "Vulnerable stream"
        }
      },
      {
        "comment": "Writing potentially tainted bytes (in a given range) to a vulnerable stream is a sink.",
        "class": "training07.OutputStream",
        "method": "write:([BII)V",
        "input": {
          "location": "arg1",
          "namespace": "com.diffblue.security.specialized",
          "taint": "Tainted byte array"
        },
        "sinkTarget": {
          "location": "this",
          "vulnerability": "Vulnerable stream"
        }
      },
      {
        "comment": "Writing potentially tainted bytes (the whole array) to a vulnerable stream is a sink.",
        "class": "training07.OutputStream",
        "method": "write:([B)V",
        "input": {
          "location": "arg1",
          "namespace": "com.diffblue.security.specialized",
          "taint": "Tainted byte array"
        },
        "sinkTarget": {
          "location": "this",
          "vulnerability": "Vulnerable stream"
        },
        "message": "Unescaped HTML potentially written back to browser"
      },
      {
        "comment": "Calling sanitise on a tainted string removes all taint from it.",
        "class": "training07.test",
        "method": "sanitise:(Ltraining07/String;)Ltraining07/String;",
        "sanitizes": {
          "taint": "Tainted string",
          "location": "returnValue"
        }
      }
    ]
}


